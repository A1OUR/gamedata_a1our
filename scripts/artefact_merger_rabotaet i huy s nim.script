--[[-----------------------------------------------------------------------------------------------
 File         : artefact_merger.script
 Description  : Artefact merger's menu and features
 Copyright    : OLR Team
 Author       : _Boolean_, proger_Dencheek
 Date         : 08.04.2014
 Last edit    : 13.05.2014
--]]-----------------------------------------------------------------------------------------------
-----------------------------------
-- Variables
-----------------------------------
local zh = 0
local recipes_table = {
	{"af_gravi", "af_vyvert", "artm_af_gold_fish", "af_gold_fish"},
	
	{"af_night_star", "proboi", "artm_af_gold_fish", "proboi_1"},

	{"af_medusa", "af_drops", "artm_af_soul", "af_soul"},

	{"af_blood", "af_fireball", "artm_af_dummy_spring", "af_dummy_spring"},

        {"af_ameba_slime", "af_mincer_meat", "artm_af_dummy_glassbeads", "af_dummy_glassbeads"},

        {"af_electra_sparkler", "af_electra_flash", "artm_af_electra_moonlight", "af_electra_moonlight"},

        {"af_cristall", "af_fuzz_kolobok", "lithium_profff", "af_dummy_battery"},
         
}

local olr_artefacts = {
	af_base = true,
	af_medusa = true,
	af_cristall_flower = true,
	af_night_star = true,
	af_vyvert = true,
	af_gravi = true,
	af_gold_fish = true,
	af_drops = true,
	af_fireball = true,
	af_cristall = true,
	af_blood = true,
	af_mincer_meat = true,
	af_soul = true,
	af_electra_sparkler = true,
	af_electra_flash = true,
	af_electra_moonlight = true,
	af_ameba_slime = true,
	af_ameba_slug = true,
	af_ameba_mica = true,
	af_dummy_spring = true,
	af_dummy_dummy = true,
	af_dummy_battery = true,
	af_dummy_pellicle = true,
	af_dummy_glassbeads = true,
	af_rusty_thorn = true,
	af_rusty_kristall = true,
	["af_rusty_sea-urchin"] = true,
	af_fuzz_kolobok = true,
	af_compas = true,
	proboi = true,
	proboi_1 = true,
	af_buliz = true
}
local disappear_time = 0
local af_info_statics = {}
local reg_ids = {}
local af_slot = {}
local ignore_af_section = {}
local to_end_table = {}
local static_icon = nil
local last_key = -1
local select_buttons = {}
local used_section_button = {}
local oButtons = {}
local dude = {}
local cells_cnt = {
	x = 0,
	y = 0
}
-----------------------------------
class "CButtonData"
-----------------------------------
-- Construct
function CButtonData:__init(wind, section, button)
	self.section = section
	self.wind = wind
	self.button = button
	table.insert(oButtons, self)
end

-- Destruct
function CButtonData:__finalize()

end

function CButtonData:OnPress()
	remove()
	local ini = system_ini()
	local line_to_pos = {
		inv_name = {
			70, 325, 50, 50, nil, true
		},
		--description = {
		--	63, 462, 333, 156
		--},
		cost = {
			309, 325, 50, 50, "RU"
		},
		--inv_weight = {
		--	305, 436, 50, 50, "kg"
		--}
	}
	
	--self.wind:Clear_af_info_statics()
	local kol = 0
	local art_sec = self.section
	local count_arts = function(npc, obj)
		if obj ~= nil then
			if obj:section() == art_sec then
				kol = kol + 1
			end
		end
	end
	db.actor:iterate_inventory(count_arts, db.actor)

	for key, val in pairs(line_to_pos) do
		local oStatic = nil
		local is_init_child = false
		
		if af_info_statics[key] ~= nil then
			oStatic = af_info_statics[key]
		else
			oStatic = CUIStatic()
			oStatic:Init(val[1], val[2], val[3], val[4])
			oStatic:SetTextColor(255, 238, 155, 23)
			is_init_child = true
		end
		
		if val[5] == nil then
			if val[6] == true then
				oStatic:SetTextST(ini:r_string(self.section, key))
			else
				oStatic:SetText(ini:r_string(self.section, key))
			end
		elseif val[6] == true then
			oStatic:SetTextST(
				("%s %s"):format(
					ini:r_string(self.section, key), val[5]
				)
			)
		else
			oStatic:SetText(
				("%s %s"):format(
					ini:r_string(self.section, key), val[5]
				)
			)
		end
		
		if is_init_child == true then
			self.wind:AttachChild(oStatic)
			af_info_statics[key] = oStatic
		end
		
		self.wind.description:SetTextST(ini:r_string(self.section, "description"))
		self.wind.count_xml:SetTextST("Количество в инвентаре: " .. kol)
		self.wind:ClearStaticIcon()
	end
end

function CButtonData:OnDoublePress()
	self.wind:AddTo2Af(self.section, self)
end

-----------------------------------
class "CSlotData"
-----------------------------------
-- Construct
function CSlotData:__init(wind, section, slot_id)
	self.section = section
	self.wind = wind
	self.slot_id = slot_id
end

-- Destruct
function CSlotData:__finalize()

end

function CSlotData:OnPress()
	self.wind:DeleteAfInSlot(self.slot_id)
end

-----------------------------------
class "MergerMenu" (CUIScriptWnd)
-----------------------------------
-- Construct
function MergerMenu:__init() super()
	self:InitControls()
	self:InitCallBacks()
end

-- Destruct
function MergerMenu:__finalize()
end

function MergerMenu:InitControls()
	self:Init(0, 0, 1024, 768)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_artefact_merger_wnd.xml")
	
	self.background = xml:InitStatic("background", self)
	
	self.btn_exit = xml:Init3tButton("background:btn_exit",	self.background)	
	self:Register(self.btn_exit, "btn_exit")
	
	self.description = xml:InitStatic("background:description",	self.background)
	self.count_xml = xml:InitStatic("background:count_xml",	self.background)
	
	self.btn_try = xml:Init3tButton("background:btn_try",	self.background)	
	self:Register(self.btn_try, "btn_try")
	self.btn_try:Enable(false)
	
	self:ShowArtefactsIcons()
end

function MergerMenu:ShowArtefactsIcons()
local dude = {}
local x_cnt, y_cnt = 0, 0
	local calc = function(npc, obj)
		if obj ~= nil then
			local section = obj:section()
			if (olr_artefacts[section] and
				used_section_button[section] ~= true
				and ignore_af_section[section] ~= true
			) then
				self:AddArtefactIcon(obj, section)
			end
		end
	end
	db.actor:iterate_inventory(calc, db.actor)
end

function MergerMenu:ClearArtefactsIcons()
	if next(dude) ~= nil then
		for _,val in pairs(dude) do
				self:DetachChild(self[val])
				--self[val]:InitTexture("")
				--self[val] = nil
		end
	end
	dude = {}
end

function MergerMenu:AddArtefactIcon(obj, section)
	local reg_id = section
	--[[if type(obj) == "number" then
		reg_id = ("af_%d"):format(obj)
	elseif type(obj) == "string" then
		reg_id = ("af_%s"):format(obj)
	else
		reg_id = ("af_%d"):format(obj:id())
	end
	]]
	local x, y = GetInvPos(section)

	self[reg_id] = CUIButton()
	self:AttachChild(self[reg_id])
	self[reg_id]:Init(52+25*cells_cnt.x, 103+30*cells_cnt.y, 25, 30)
	self[reg_id]:InitTexture("ui\\ui_icon_equipment")
	self[reg_id]:SetOriginalRect(x, y, 50, 50)
	self[reg_id]:SetStretchTexture(true)
	self:Register(self[reg_id], reg_id)
	local button = CButtonData(self, section, self[reg_id])
	self:AddCallback(
		reg_id,
		ui_events.BUTTON_CLICKED,
		button.OnPress,
		button
	)
	self:AddCallback(
		reg_id,
		ui_events.WINDOW_LBUTTON_DB_CLICK,
		button.OnDoublePress,
		button
	)
	table.insert(reg_ids, reg_id)
	get_console():execute(reg_id)
	used_section_button[section] = true
	cells_cnt.x = cells_cnt.x + 1
	if cells_cnt.x >= 14 then
		cells_cnt.x = 0
		cells_cnt.y = cells_cnt.y + 1
	end
	if is_in_list(button, dude) == false then
	table.insert(dude, button)
	end
end

function MergerMenu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnExitClick()
		end
	end
end

function MergerMenu:ReloadArtefactsIcons()
	self:ClearArtefactsIcons()
	self:ShowArtefactsIcons()
end

function MergerMenu:InitCallBacks()
	self:AddCallback(
		"btn_exit",
		ui_events.BUTTON_CLICKED,
		self.OnExitClick,
		self
	)
	self:AddCallback(
		"btn_try",
		ui_events.BUTTON_CLICKED,
		self.OnTryClick,
		self
	)
end

function MergerMenu:AddTo2Af(section, button)
	--for k,val in ipairs(recipes_table) do
		--if has_alife_info(val[3]) and (section == val[1] or section == val[2]) then
		--if (section == val[1] or section == val[2]) then
			if af_slot[1] == nil then
				local x, y = GetInvPos(section)
				if self.af_slot_1 == nil then
					self.af_slot_1 = CUIButton()
					self.af_slot_1:Init(430, 280, 45, 50)
					self.af_slot_1:InitTexture("ui\\ui_icon_equipment")
					self.af_slot_1:SetOriginalRect(x, y, 50, 50)
					self.af_slot_1:SetStretchTexture(true)
					self:Register(self.af_slot_1, "af_slot_1")
					self:AttachChild(self.af_slot_1)
				else
					self.af_slot_1:SetOriginalRect(x, y, 50, 50)
					self.af_slot_1:Show(true)
				end
				local kol = 0
				local count_arts = function(npc, obj)
					if obj ~= nil then
						if obj:section() == section then
							kol = kol + 1
						end
					end
					end
				db.actor:iterate_inventory(count_arts, db.actor)

				if kol == 1 then
				get_console():execute("убираем")
				button.button:Show(false)
				end
				select_buttons[1] = {section, button}
				af_slot[1] = section
				local slot = CSlotData(self, section, 1)
				self:AddCallback(
					"af_slot_1",
					ui_events.BUTTON_CLICKED,
					slot.OnPress,
					slot
				)
				last_key = k
			elseif af_slot[2] == nil then
				if k == last_key and af_slot[1] ~= section then
					local x, y = GetInvPos(section)
					if self.af_slot_2 == nil then
						self.af_slot_2 = CUIButton()
						self.af_slot_2:Init(480, 280, 45, 50)
						self.af_slot_2:InitTexture("ui\\ui_icon_equipment")
						self.af_slot_2:SetOriginalRect(x, y, 50, 50)
						self.af_slot_2:SetStretchTexture(true)
						self:Register(self.af_slot_2, "af_slot_2")
						self:AttachChild(self.af_slot_2)
					else
						self.af_slot_2:SetOriginalRect(x, y, 50, 50)
						self.af_slot_2:Show(true)
					end
					local kol = 0
					local count_arts = function(npc, obj)
						if obj ~= nil then
							if obj:section() == section then
								kol = kol + 1
							end
						end
						end
					db.actor:iterate_inventory(count_arts, db.actor)

					if kol == 1 then
					button.button:Show(false)
					end
					select_buttons[2] = {section, button}
					af_slot[2] = section
					local slot = CSlotData(self, section, 2)
					self:AddCallback(
						"af_slot_2",
						ui_events.BUTTON_CLICKED,
						slot.OnPress,
						slot
					)
					local obj_1 = db.actor:object(af_slot[1])
					local obj_2 = db.actor:object(af_slot[2])
					for k,val in ipairs(recipes_table) do
						if (af_slot[1] == val[1] and af_slot[2] == val[2]) or (af_slot[2] == val[1] and af_slot[1] == val[2]) then
							if obj_1 ~= nil and obj_2 ~= nil then
								to_end_table = {
									[1] = obj_1:id(), [2] = obj_2:id(), [3] = val[4]
								}
							end
							zh = 1
							break							
						end
					end
					if zh == 0 then
						if (af_slot[1] == "proboi" or af_slot[2] == "proboi") then
							if obj_1 ~= nil and obj_2 ~= nil then
								to_end_table = {
									[1] = obj_1:id(), [2] = obj_2:id(), [3] = "proboi"
								}
							end
						elseif (af_slot[1] == "proboi_1" or af_slot[2] == "proboi_1") then
							if obj_1 ~= nil and obj_2 ~= nil then
								to_end_table = {
									[1] = obj_1:id(), [2] = obj_2:id(), [3] = "proboi_1"
								}
							end
						else
							if obj_1 ~= nil and obj_2 ~= nil then
								to_end_table = {
									[1] = obj_1:id(), [2] = obj_2:id(), [3] = "af_buliz"
								}
							end
						end
					end
					zh = 0
					self.btn_try:Enable(true)
				end
			end
			--break
		--end
	--end
end

function MergerMenu:DeleteAfInSlot(slot_id)
	if next(oButtons) ~= nil then
		for _,val in ipairs(oButtons) do
			if val.section == af_slot[slot_id] then
				val.button:Show(true)
				break
			end
		end
	end
	self[("af_slot_%d"):format(slot_id)]:Show(false)
	select_buttons[slot_id] = nil
	af_slot[slot_id] = nil
	if slot_id == 1 and af_slot[2] ~= nil then
		select_buttons[1] = select_buttons[2]
		af_slot[1] = af_slot[2]
		select_buttons[2] = nil
		af_slot[2] = nil
		local x, y = GetInvPos(af_slot[1])
		self.af_slot_1:SetOriginalRect(x, y, 50, 50)
		self.af_slot_2:Show(false)
		self.af_slot_1:Show(true)
	end
	self.btn_try:Enable(false)
end

function MergerMenu:OnTryClick()
	if next(to_end_table) ~= nil then
		local new_af_cell = nil
		local sobj = alife():create(
			to_end_table[3],
			db.actor:position(),
			db.actor:level_vertex_id(),
			db.actor:game_vertex_id(),
			db.actor:id()
		)
		hidden_slots.remove_item(to_end_table[1])
		hidden_slots.remove_item(to_end_table[2])
		self.af_slot_1:Show(false)
		self.af_slot_2:Show(false)
		local ini = system_ini()
		local line_to_pos = {
			inv_name = {
				70, 325, 50, 50, nil, true
			},
			--description = {
			--	63, 462, 333, 156
			--},
			cost = {
				309, 325, 50, 50, "RU"
			},
			--inv_weight = {
			--	305, 436, 50, 50, "kg"
			--}
		}
		
		--self.wind:Clear_af_info_statics()
		local art_sec = to_end_table[3]

		for key, val in pairs(line_to_pos) do
			local oStatic = nil
			local is_init_child = false
			
			if af_info_statics[key] ~= nil then
				oStatic = af_info_statics[key]
			else
				oStatic = CUIStatic()
				oStatic:Init(val[1], val[2], val[3], val[4])
				oStatic:SetTextColor(255, 238, 155, 23)
				is_init_child = true
			end
			
			if val[5] == nil then
				if val[6] == true then
					oStatic:SetTextST(ini:r_string(art_sec, key))
				else
					oStatic:SetText(ini:r_string(art_sec, key))
				end
			elseif val[6] == true then
				oStatic:SetTextST(
					("%s %s"):format(
						ini:r_string(art_sec, key), val[5]
					)
				)
			else
				oStatic:SetText(
					("%s %s"):format(
						ini:r_string(art_sec, key), val[5]
					)
				)
			end
			
			if is_init_child == true then
				self:AttachChild(oStatic)
				af_info_statics[key] = oStatic
			end
			self.description:SetTextST(ini:r_string(art_sec, "description"))
			self:ClearStaticIcon()
		end
		-- Result icon
		local x, y = GetInvPos(to_end_table[3])

		if static_icon == nil then

			static_icon = CUIStatic()
			static_icon:Init(447, 152, 50, 50)
			static_icon:InitTexture("ui\\ui_icon_equipment")
			static_icon:SetOriginalRect(x, y, 50, 50)
			self:AttachChild(static_icon)

		else
			static_icon:Init(447, 152, 50, 50)
			static_icon:InitTexture("ui\\ui_icon_equipment")
			static_icon:SetOriginalRect(x, y, 50, 50)
			static_icon:Show(true)
		end

		--[[
		local cnt_1 = -1
		local cnt_2 = -1
		local calc = function(npc, obj)
			if obj ~= nil and select_buttons[1] ~= nil and select_buttons[2] ~= nil then
				if obj:section() == select_buttons[1][1] then
					cnt_1 = cnt_1 + 1
				elseif obj:section() == select_buttons[2][1] then
					cnt_2 = cnt_2 + 1
				end
			end
		end
		db.actor:iterate_inventory(calc, db.actor)
		if cnt_1 > 0 then
			select_buttons[1][2].button:Show(true)
		else
			new_af_cell = select_buttons[1][2]
		end
		if cnt_2 > 0 then
			select_buttons[2][2].button:Show(true)
		elseif new_af_cell == nil then
			new_af_cell = select_buttons[2][2]
		end
		select_buttons = {}
		--self:ReloadArtefactsIcons()
		]]
		
		local iter_2 = -1
		for iter_1,val in pairs(dude) do
					if val.section == art_sec then
						iter_2 = iter_1
					end
		end
		if iter_2 ~= -1 then
			if dude[iter_2].button:IsShown() == false then
			dude[iter_2].button:Show(true)
			get_console():execute("показываем_старую_иконку")
			else
			get_console():execute("иконка_уже_показана")
			end
		else
			get_console():execute("добавляем_новую иконку")
			self:AddArtefactIcon(sobj.id, to_end_table[3])
		end
		

		to_end_table = {}
		af_slot = {}
		last_key = -1
		local snd_obj = xr_sound.get_safe_sound_object([[anomaly\gravi_blowout2]])
        snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		self.btn_try:Enable(false)
		self.count_xml:SetTextST("Количество в инвентаре: " .. kolvo(art_sec))
		--self.count_xml:SetTextST("Количество в инвентаре: 01212132")

	end
end

function MergerMenu:ClearStaticIcon()
	if static_icon ~= nil then
		static_icon:SetOriginalRect(0, 0, 0, 0)
	end
end

function MergerMenu:OnExitClick()
	if self.owner ~= nil then
		self:GetHolder():start_stop_menu(self.owner, true) -- new
		self:GetHolder():start_stop_menu(self, true)
		self.owner:Show(true)
	else
		self:GetHolder():start_stop_menu(self, true)
	end
self:ClearStatics()
end

function MergerMenu:ClearStatics()
	self:Clear_af_info_statics()
	self:ClearArtefactsIcons()
	if static_icon ~= nil then
		self:DetachChild(static_icon)
		static_icon = nil
	end
	if self.af_slot_1 ~= nil then
		self:DetachChild(self.af_slot_1)
		self.af_slot_1 = nil
	end
	if self.af_slot_2 ~= nil then
		self:DetachChild(self.af_slot_2)
		self.af_slot_2 = nil
	end
	cells_cnt = {
		x = 0,
		y = 0
	}
	af_slot = {}
	ignore_af_section = {}
	disappear_time = 0
	to_end_table = {}
	used_section_button = {}
	oButtons = {}
	self.af_slot_1 = nil
	self.af_slot_2 = nil
end

function MergerMenu:Clear_af_info_statics()
	if next(af_info_statics) ~= nil then
		--for _,val in ipairs(af_info_statics) do
			--if val ~= nil then
				--self:DetachChild(val)
			--end
		--end
		af_info_statics = {}
	end
end

-----------------------------------------------------------
-- Different functions
-----------------------------------------------------------
function on_use(obj)
	if obj:section() == "device_atifact_merger" then
		level.start_stop_menu(MergerMenu(get_hud()), true)
		hidden_slots.spawn_item_in_inv("device_atifact_merger")
	end
end

function check_time()
	return time_global() > disappear_time
end

function remove()
	if static_icon ~= nil then
		static_icon:Show(false)
	end
end

-- Icons data
function GetInvPos(section)
	local ini = system_ini()
	local x = ini:r_s32(section, "inv_grid_x")*50
	local y = ini:r_s32(section, "inv_grid_y")*50
	return x, y
end
---------------------------------------------------------------------------------------------
function is_in_list(obj, list)
	if next(list) ~= nil then
		for _,val in ipairs(list) do
			if val.section == obj.section then
				return true
			end
		end
		return false
	end
	return false
end
function kolvo(art_sec)
		local k = 0
		local count_arts = function(npc, obj)
			if obj ~= nil then
				if obj:section() == art_sec then
					k = k + 1
				end
			end
		end
		db.actor:iterate_inventory(count_arts, db.actor)
		return k
end

