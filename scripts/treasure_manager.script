local treasure_manager = nil
local last_looted
local glvid_by_level = {["l01_escape"] = {14274, 161}}
local general_probability = 65

function id_to_num(id)
	return tonumber(id) % 100
end

function parse_spawns(line)
	if line == nil then
		return {}
	end

	--' если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
	local t = se_respawn.parse_names(line)
	local n = table.getn(t)
		
	local ret_table = {}
	local k = 1

	while k <= n do
		local spawn = {}
		spawn.section = t[k]
		-- Проверяем что это не последняя запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			-- проверяем что вторым числом задана вероятность, а не другая секция спавну
			if p then
				-- забиваем число
				spawn.prob = p
				k = k + 2
			else
				-- забиваем дефолт 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end


class "CTreasure"
function CTreasure:__init()
end
--' Юзание инициатора (возможность выдать тайник)
function CTreasure:use(npc)
	printf("TREASURE USE")
	
	--' Проверим, не вызывались ли мы уже для этого объекта. 
	local se_obj = alife():object(npc:id())
	if se_obj.treasure_processed == true then
		return
	end
	se_obj.treasure_processed = true
	
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(self.treasure_info) do
		if v.done == false then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 and
			v.community[npc:character_community()] == true and
			v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			self:give_treasure(v.k)
			break
		end
	end
end
--' Сохранение
function CTreasure:check()

end
--' Выдача тайника
function CTreasure:give_treasure(k)
	local v = self.treasure_info[k]
--	local obj = alife():story_object(v.target)
	local sim = alife()
	local obj = sim:story_object(v.target)
	if obj ~= nil then
		news_manager.send_treasure(v.name)
		--' Чтобы вещи заспавненные актору при заполнении тайника не защитывались по on_item_take
		--' Пометить на карте		
		local text = "%c[255,238,155,23]"..game.translate_string(v.name).."\\n".."%c[default]"..game.translate_string(v.description)
		level.map_add_object_spot_ser(obj.id, "treasure", text)

		--' Сгенерить вещи
		--'
		--' Из-за какого-то дефекта в xrGame.dll тайник потеряет
		--' сгенерированное содержимое в следующей ситуации:
		--'  1) получена ссылка на тайник, который находится в online;
		--'  2) игрок сохраняется и загружается;
		--'  3) между 1 и 2 не было переводов тайника в offline хотя бы раз.
		--' Для предотвращения этого создаём вещи у актёра, запоминаем
		--' идентификаторы, а в вызове actor_binder:update() переносим их
		--' в нужный ящик.
		local item_ids = {}
		local pos, lvid, gvid, pid, new_obj
		local need_workaround = level.object_by_id(obj.id) ~= nil
		if need_workaround then
			pos = db.actor:position()
			lvid = db.actor:level_vertex_id()
			gvid = db.actor:game_vertex_id()
			pid = db.actor:id()

		else
			pos = obj.position
			lvid = obj.m_level_vertex_id
			gvid = obj.m_game_vertex_id
			pid = obj.id
		end
		for kk,vv in pairs(v.items) do
			if ammo_section[vv.section] == true then
--[[				se_respawn.create_ammo(vv.section,	
						obj.position,
						obj.m_level_vertex_id,	
						obj.m_game_vertex_id,
						obj.id,
						vv.prob) ]]
				local left, box_size = vv.prob, system_ini():r_u32(vv.section, "box_size")
				while left > box_size do
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, box_size)
					table.insert(item_ids, new_obj.id)
					left = left - box_size
				end
				if left > 0 then
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, left)
					table.insert(item_ids, new_obj.id)
				end
			else
				for i=1,vv.prob do
--[[					alife():create(vv.section,
							obj.position,
							obj.m_level_vertex_id,	
							obj.m_game_vertex_id,
							obj.id) ]]
					new_obj = sim:create(vv.section, pos, lvid, gvid, pid)
					table.insert(item_ids, new_obj.id)
				end
			end
		end
		
		if need_workaround then
			self.loss_workaround_queue[v.target] = item_ids
		end
		
		--' Пометим тайник как выданный
		self.treasure_info[k].active = true
		self.treasure_info[k].done = true
	else
		printf("TREASURE %s, target doesnt exist", k)
	end
end
--' Перенос содержимого для предотвращения возможной потери
function CTreasure:loss_workaround()

end
--' Снимаем отметку с тайника
function CTreasure:treasure_empty(box, box_story_id)

end
--' Сохранение
function CTreasure:save(p)
	
end
--' Загрузка
function CTreasure:load(p)

end
--' На конструкторе вычитываем LTX и создаем заготовки квестов.
local ini = ini_file("misc\\treasure_manager.ltx")

--' Итерируемся по всем настройкам фраз
if not ini:section_exist("list") then
	abort("There is no section [list] in treasure_manager.ltx")
end
local n = ini:line_count("list")
local id, value = "",""

--' начальная установка
local treasure_info = {}

for i=0,n-1 do
	result, id, value	= ini:r_line("list",i,"","")
	
	treasure_info[id] = {}
	treasure_info[id].probability		= utils.cfg_get_number(ini, id, "probability", nil, true)
	treasure_info[id].target		= utils.cfg_get_string(ini, id, "target", nil, true, "")
	treasure_info[id].name			= utils.cfg_get_string(ini, id, "name", nil, true, "")
	treasure_info[id].description	= utils.cfg_get_string(ini, id, "description", nil, true, "")
	treasure_info[id].level	= utils.cfg_get_string(ini, id, "level", nil, true, "")
	treasure_info[id].items		= parse_spawns(utils.cfg_get_string(ini, id, "items", nil, true, ""))

	local community	= parse_names(utils.cfg_get_string(ini, id, "community", nil, false, "", "stalker, bandit, dolg, freedom"))
	treasure_info[id].community = {}
	for k,v in pairs(community) do
		treasure_info[id].community[v] = true
	end


	if treasure_info[id].items == nil then
		abort("cant find 'items' in %s", id)
	end

	treasure_info[id].rank = utils.cfg_get_string(ini, id, "rank", nil, true, "")
	treasure_info[id].level = utils.cfg_get_string(ini, id, "level", nil, true, "")
	--' Отметим тайник как новый
	--print_table(self.treasure_info)
end

--' Вспомогательные таблицы для облегчения поиска
local treasure_by_target = {}
for k,v in pairs(treasure_info) do
	treasure_by_target[v.target] = k	
end


function get_treasure_manager()
	return treasure_manager
end

function take_item_from_box(box, box_story_id)
	printf("!!! take item from box %s", tostring(box:is_inv_box_empty()))
	if box:is_inv_box_empty() == true then
		get_treasure_manager():treasure_empty(box, box_story_id)
	end
end

function save(p)

end
function load(p)

end
function clear_treasure_manager()
	treasure_manager = nil
end

function get_treasure_manager_new(obj)
--	db.actor:give_game_news("Тайники не работают!!!!!!!!! Доделать!!!!!!!!!!!!!!!!!!", "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
--	return false
--end
--function get_treasure_manager_new_dodelatb(obj)
	for k,v in pairs(treasure_info) do
		if obj:has_info(v.target) then
			if db.actor:dont_has_info(v.target) then
				db.actor:give_info_portion(v.target)
				news_manager.send_treasure(v.name)
				p = patrol(v.target)
				sobj = alife():create("rukzak", (p:point(index)),  p:level_vertex_id(index), p:game_vertex_id(index))
				alife():use_ai_locations(sobj, false)
				for kk,vv in pairs(v.items) do
					if ammo_section[vv.section] == true then
						se_respawn.create_ammo(vv.section,	
								sobj.position,
								p:level_vertex_id(index),	
								p:game_vertex_id(index),
								sobj.id,
								vv.prob)
					else
						for i=1,vv.prob do
							alife():create(vv.section,
									sobj.position,
									p:level_vertex_id(index),	
									p:game_vertex_id(index),
									sobj.id)
						end
					end
				end
				level.map_add_object_spot_ser( sobj.id, "treasure", game.translate_string(v.name))
			end
		end
	end
	--[[if obj:has_info("test_stash1") then
		if db.actor:dont_has_info("test_stash1") then 
			db.actor:give_info_portion("test_stash1")
			db.actor:give_game_news("ty nashol toyneek", "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
			sobj = alife():create("inventory_box", patrol("attic"):point(5), 14274, 161)
			alife():create_ammo("ammo_9x18_fmj",
		sobj.position,
		sobj.m_level_vertex_id,
		sobj.m_game_vertex_id,
		sobj.id,
		20)
			alife():create("af_medusa", sobj.position,
		14274, 161,
		sobj.id)
			level.map_add_object_spot_ser( sobj.id, "treasure", "Backpack with the loot" )
		end
	end]]
end

function take_item_from_box_n(box)
	if box:is_inv_box_empty() == true then
		db.actor:give_game_news(box:section(), "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
		db.actor:give_game_news("empty", "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
		this.treasure_empty_n(box)
	end
end

function treasure_empty_n(box)
	level.map_remove_object_spot(box:id(), "treasure")
	if box:section() == "rukzak" then
			alife():release(alife():object(box:id()), true)
	end
end

function give_treasure(npc)
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(treasure_info) do
		local treasure_prob = v.probability

		if treasure_prob == "" or treasure_prob == nil then
			treasure_prob = 0
		end
		
		if tonumber(treasure_prob) >= 0 and
		v.community[npc:character_community()] == true
		then
			if tonumber(treasure_prob) == 100 then
				return k
			else
				table.insert(avail, {k = k, prob = treasure_prob})
				tr_sum = tr_sum + treasure_prob
			end
		end
	end
	db.actor:give_game_news("key is "..tostring(id_to_num(npc:id())), "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
	if tr_sum == 0 or
		id_to_num(npc:id()) < general_probability
	then
		return nil
	end

	local tr_w = tr_sum*((id_to_num(npc:id())-general_probability)/(100-general_probability))
	db.actor:give_game_news("weight is "..tostring(tr_w).." when sum is "..tostring(tr_sum), "ui\\ui_iconsTotal", Frect():set(83,470,83,47), 1000, 5000)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			return v.k
		end
	end
end