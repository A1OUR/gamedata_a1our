---------------- Схема поведения НПС при выбросе для OGSM 2.x -----------------

------------------------- Copyright 2007-2008 DEXXX ---------------------------
--Gnomi123: Вроде как очень всрато реализовал, но работает. Возможно стоит что-то уменьшить и перенести на движок
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local iSSVer          = script_server_object_version() or -1 --/ 'Script-Server' версия
local tMaxVertexIds   = {} --/ массив Tab[IdMap] = {[1]=idGvMin,[2]=idGvMax,[3]=idLvMax}
local tLevelIdByName  = {} --/ массив ID и имен локаций (Tbl[Name]=ID)
local tIdsByLevelName = {} --/ массив IDs по имени локации (Tbl[Name]={idMap,idGv,idLv})
local tInvNames       = {} --/ массив инвентарных имен объектов
local tSenders        = {} --/ массив имен спамеров
local tBoxSizes       = {} --/ массив объемов пачек патронов (количество - шт.)
local tWeights        = {} --/ массив веса предметов
local tCosts          = {} --/ массив стоимости предметов
local tClasses        = {} --/ массив классов предметов
local tLowUp          = nil --/ массив 'кириллицы'
local oCTime_Start    = nil --/ объект счетчика времени в Зоне с момента 'даты старта'
local tPStorA         = nil --/ массив 'pstor' актора
local oPkF            = net_packet() --/ объект функции для STATE_packet
local fs              = getFS() --/ переменная, кеширующая функцию getFS()
local sini            = system_ini() --/ переменная, кеширующая функцию system_ini()
local gmg             = nil --/ переменная, кеширующая функцию game_graph()
local sim             = nil --/ переменная, кеширующая функцию alife()
local sMapNow,idMapNow --/ текущий уровень
local idGvMinNow,idGvMaxNow,idLvMaxNow --/ мин&макс Id-вертексов для текущего уровня
local tPStorTypeValue = {
	['nil']     = true,
	['boolean'] = true,
	['number']  = true,
	['string']  = true
}

function Get_LevelId(idGv)
	if not gmg then gmg = game_graph() end
	if idGv and gmg:valid_vertex_id(idGv) then
		local oVertex = gmg:vertex(idGv)
		if oVertex then
			return oVertex:level_id() --/> idLevel | idMap
		elseif db.is_dbg1 then
			if callstack then
				callstack("Get_LevelId: idGv=["..tostring(idGv).."]~>wrong vertex:<Warning!>")
			else
				printf("Get_LevelId: idGv=["..tostring(idGv).."]~>wrong vertex:<Warning!>")
			end
		end
	elseif db.is_dbg1 and callstack then
		callstack("Get_LevelId: idGv=["..tostring(idGv).."]<~NOT_valid:<Warning!>")
	else
		printf("Get_LevelId: idGv=[%s]<~NOT_valid:<%s>", idGv, "Warning!")
	end
	return nil --/>
end

function Get_MinMax_IdVertexes(idMap)
	if not idMap then idMap = alife():level_id() end --/ берем текущий уровень
	if not tMaxVertexIds[idMap] then
--		log("Get_MinMax_IdVertexes:idMap=[%s]:[%s]", idMap, ">") --/ #~#
		if not gmg then gmg = game_graph() end
		local id,idGvMin,idGvMax = 0,nil,nil
		while id < 65536 do
			if gmg:valid_vertex_id(id) and gmg:vertex(id):level_id() == idMap then --/ ID искомой локации?
				if not idGvMin then
					idGvMin = id --/ 1-й индекс искомой локации
				end
				idGvMax = id --/ текущий (он же последний) искомой локации
			elseif idGvMin then --id = 65536
				break
			end
			id = id +1
		end
		return Get_Max_IdLevelVertex(idMap,idGvMin,idGvMax)
		--tMaxVertexIds[idMap] = {idGvMin,idGvMax,idLvMax}
	end
	--return tMaxVertexIds[idMap][1], tMaxVertexIds[idMap][2], tMaxVertexIds[idMap][3] --/> idGvMin и idGvMax и idLvMax
	--return idLvMax
end

function Get_Max_IdLevelVertex(idMap,idGvMin,idGvMax)
	--local idLvMax = idMap and tMaxVertexIds[idMap] and tMaxVertexIds[idMap][3]
	--if idLvMax then
	--	return idLvMax --/>
	--elseif not (idGvMin and idGvMax) then
	--	if not idMap then
	--		idMap = Get_LevelId(idGvMin or idGvMax or alife():level_id())  --/ ... или сканируем текущий уровень
	--	end
	--	idGvMin,idGvMax,idLvMax = Get_MinMax_IdVertexes(idMap)
	--end
	local idLvMax
	if not idLvMax and idGvMin and idGvMax then
		if not gmg then gmg = game_graph() end
		local id,idLv = 0,nil
		for id=idGvMin, idGvMax do
			idLv = gmg:vertex(id):level_vertex_id()
			if not idLvMax or idLvMax < idLv  then
				idLvMax = idLv
			end
		end
		--if idMap then tMaxVertexIds[idMap][3] = idLvMax end
	end
--	log("%s:Get_LevelVertexIds: idMap==[%s], idGv=[%s/%s], idLvMax=[%s]", sModule, idMap, idGvMin, idGvMax, idLvMax, "") --/#~#
	return idLvMax --/>
end

function Get_Never_idLv_by_Pos(vPos,iErr,Obj,idLvMaxNow)
	if not iErr then iErr = 0.5 end --/ если не задана погрешность по дистанции (0 => макс.точность)
	if not vPos and Obj then --/ если не задана позиция ...
		if type(Obj.position) == 'function' then
			vPos = Obj:position()
		else
			vPos = Obj.position
		end
	end
	local idLv,iDistMin,iDist
	for id=0,idLvMaxNow do
		iDist = level.vertex_position(id):distance_to_sqr(vPos)
		if not iDistMin or iDist < iDistMin then
			idLv = id
			iDistMin = iDist
			if iDistMin < iErr then break end --/ прерываем цикл
		end
	end
--	log("Get_Never_idLv_by_Pos:idLv=[%s/%s],Pos=[%s]:(%s)", idLv, idLvMaxNow, idLv and level.vertex_position(idLv), string.short(iDistMin), "") --/#~#
	return idLv,iDistMin --/>
end

local c = get_console()
restrictor_list = {}
special_restrictor_list = {}

local npc_psy = {}
local npc_run = {}
local npc_sit = {}
local npc_go = {}


-- We check whether NPC is in specific rectangle zone (are set for special places, 
-- such as bar, where NPCs should not react to blowout at all)
function npc_in_zone(obj,lev,pos_psy_x,pos_psy_y,size_psy_x,size_psy_y,z1,z2)
local level_name = level.name()
if level_name ~= lev then
	return false
end
local pos = obj:position()
local x1 = pos_psy_x
local x2 = pos_psy_y
local y1 = size_psy_x
local y2 = size_psy_y
if (pos.x >= x1 and pos.x <= x2) and (pos.z >= y1 and pos.z <= y2) and (pos.y >= z1) and (pos.y <= z2) then
	return true
end
return false
end

-- We get the nearest to NPC hide
function get_nearest_hide(npc)
local hideout_list = {}
for k,v in pairs(restrictor_list) do
	local community, radius = get_community_hide(v)
	local obj = level.object_by_id(v.id)
	if obj and string.find(community, npc:character_community()) then
		local npc_pos = npc:position()
		local hide_pos = obj:position()
		local distance = npc_pos:distance_to(hide_pos)
		local hide = {obj = obj, rad = radius, dist = distance}
		table.insert(hideout_list, hide)
	end
end
table.sort(hideout_list, function(a,b) return a.dist < b.dist end)
local nearest_hide = hideout_list[1]
return nearest_hide
end

function get_nearest_special_hide(npc)
local special_hideout_list = {}
for k,v in pairs(special_restrictor_list) do
	local obj = level.object_by_id(v.id)
	if obj then
		local npc_pos = npc:position()
		local hide_pos = obj:position()
		local distance = npc_pos:distance_to(hide_pos)
		local hide = {obj = obj, dist = distance}
		table.insert(special_hideout_list, hide)
	end
end
table.sort(special_hideout_list, function(a,b) return a.dist < b.dist end)
local nearest_hide = special_hideout_list[1]
return nearest_hide
end


-- We get the hideout data (communities, radius)
function get_community_hide(obj)
if not obj then return "none" end
local pk = get_netpk(obj)
local data = pk:get()
local cdata = data.custom_data:getStringRaw()
local cd = parse_custom_data(cdata)
return cd.parameters.community, data.shapes:getRadius()
end

function is_in_specific_zone(npc)
	local hide = get_nearest_special_hide(npc)
		if hide then
			if utils.npc_in_zone(npc, hide.obj) then
				return true
			end
		end
	return false
end

function is_in_hide(npc)
		local hide = get_nearest_hide(npc)
		if hide then
			if utils.npc_in_zone(npc, hide.obj) then
				return true
			end
		end
	return false
end

-- Don't touch this too.
function parse_custom_data(str)
 local t={}
 if str then
  for section, section_data in string.gfind(str,"%s*%[([^%]]*)%]%s*([^%[%z]*)%s*") do
   section = trim(section)
   t[section]={}
   for line in string.gfind(trim(section_data), "([^\n]*)\n*") do
    if string.find(line,"=")~=nil then
     for k, v in string.gfind(line, "([^=]-)%s*=%s*(.*)") do
      k = trim(k)
      if k~=nil and k~='' and v~=nil then 
       t[section][k]=trim(v) 
      end
     end
    else
     for k, v in string.gfind(line, "(.*)") do
      k = trim(k)
      if k~=nil and k~='' then
       t[section][k]="<<no_value>>" 
      end
     end
    end
   end
  end
 end
 return t
end
function gen_custom_data(tbl)
 local str=''
 for key, value in pairs(tbl) do
  str = str.."["..key.."]\n"
  for k, v in pairs(value) do
   if v~="<<no_value>>" then
    str=str..k.." = "..v.."\n"
   else
    str=str..k.."\n"
   end
  end
 end
 return str
end
function trim (s)
 return (string.gsub(s, "^%s*(.-)%s*$", "%1"))
end


-- Getting the list of hideouts on game load
function get_level_hides()
for i=1,65535 do
	local obj = alife():object(i)
	if obj then
		if string.find(obj:name(), level.name().."_hide_restrictor") then
			table.insert(restrictor_list, obj)
		end
		if string.find(obj:name(), level.name().."_special_hide_restrictor") then
			table.insert(special_restrictor_list, obj)
		end
	end
end
end


-- First run spawn. If parameter p_type is "fake_" - it means that the hide is fake - it is only for actor
-- NPCs ignore such fake hides
function first_run()

end


-- The Scheme itself below should not be edited if you don't how to do it

property_base = 12221
property_blowout = property_base+1
property_hideout_lost = property_base+2
property_inhide = property_base+3
act_base = 13332
act_hideout = act_base+1
act_psy_effect = act_base+2
act_inhide = act_base+3

-- Создаем эвалуатор - проверяем, начался ли выброс
class "evaluator_blowout" (property_evaluator)
function evaluator_blowout:__init(name, storage) super (nil, name)
	self.st = storage
end
function evaluator_blowout:evaluate()
	if not self.object:best_enemy() and 
	   db.Flag2==1 and db.Dead2==0 and 
	   not (level.name()=="l11_pripyat" and self.object:character_community() == "monolith") and
	   not is_in_hide(self.object) and not is_in_specific_zone(self.object) then
	   --c:execute("blowout_started")
		self.st.blowout = true
	else
		self.st.blowout = false
		--c:execute("blowout_not_started")
	end
	return self.st.blowout == true
end

-- Создаем эвалуатор - проверяем, потерял ли непись укрытие
class "evaluator_hideout" (property_evaluator)
function evaluator_hideout:__init(name, storage) super (nil, name)
	self.st = storage
end
function evaluator_hideout:evaluate()
	--c:execute("evaluator_hideout:evaluate_for"..self.object:name())
	if db.Dead2==1 and not is_in_hide(self.object) and not is_in_specific_zone(self.object) then
		self.st.hideout_lost = true
	else
		self.st.hideout_lost = false
	end
	return self.st.hideout_lost == true
end

-- Создаем эвалуатор - проверяем, сидит ли уже непись в укрытии
class "evaluator_inhide" (property_evaluator)
function evaluator_inhide:__init(name, storage) super (nil, name)
	self.st = storage
end
function evaluator_inhide:evaluate()
	--c:execute("evaluator_inhide:eval_for"..self.object:name())
	if db.Flag2==1 and is_in_hide(self.object) then
		self.st.inhide = true
	else
		self.st.inhide = false
	end
	return self.st.inhide == true
end 


-- Создаем оператор - направляем НПС в укрытие
class "action_hideout" (action_base)
function action_hideout:__init(name, storage) super (nil, name)
	self.st = storage
end
function action_hideout:initialize()
	--c:execute("action_hideout:initialize_for"..self.object:name())
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:clear_animations()
	npc:set_detail_path_type(move.line)
	npc:set_path_type(game_object.level_path)
	npc:remove_all_restrictions()
	if npc_run[npc:id()] ~= 1 then
		self.hide = get_nearest_hide(npc)
		if self.hide then
			npc:add_restrictions(self.hide.obj:name(), "")
			state_mgr.set_state(npc, "assault")
		else
			npc:remove_all_restrictions()
			state_mgr.set_state(npc, "hide")
		end
		npc_run[npc:id()] = 1
	end
end
function action_hideout:execute()
	--c:execute("action_hideout:execute_for"..self.object:name())
	local npc = self.object
	npc:disable_talk()
end
function action_hideout:finalize()
	--c:execute("action_hideout:finalize_for"..self.object:name())
	action_base.finalize(self)
	local npc = self.object
	npc_run[npc:id()] = 0
end

-- Создаем оператор - колбасим НПС, если он не нашел укрытие
class "action_raskolbas" (action_base)
function action_raskolbas:__init(name, storage) super (nil, name)
	self.st = storage
end
function action_raskolbas:initialize()
	--c:execute("action_raskolbas:__initialize_for"..self.object:name())
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:clear_animations()
	npc:remove_all_restrictions()
	local ran = math.random(1,2)
	if npc_psy[npc:id()] ~= 1 then
		if npc:character_community() == "monolith" then
			state_mgr.set_state(npc, "trans_1")
		else
			if ran == 1 then
				state_mgr.set_state(npc, "psycho_pain")
			else
				state_mgr.set_state(npc, "psy_pain")
			end
		end
		npc_psy[npc:id()] = 1
	end
end
function action_raskolbas:execute()
	--c:execute("action_raskolbas:execute_for"..self.object:name())
	local npc=self.object
	npc:disable_talk()
end
function action_raskolbas:finalize()
	--c:execute("action_raskolbas:finalize_for"..self.object:name())
	action_base.finalize(self)
	local npc = self.object
	npc_psy[npc:id()] = 0
end

-- Создаем оператор - усаживаем НПС, если он нашел укрытие
class "action_inhide" (action_base)
function action_inhide:__init(name, storage) super (nil, name)
	self.st = storage
end
function action_inhide:initialize()
	--c:execute("action_inhide:initialize_for"..self.object:name())
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:clear_animations()
	npc:set_detail_path_type(move.line)
	npc:set_path_type(game_object.level_path)
	npc:remove_all_restrictions()
	self.hide = get_nearest_hide(npc)
	if self.hide then
		self.vertex = Get_Never_idLv_by_Pos(nil,0,self.hide.obj,Get_MinMax_IdVertexes())
		self.offset = vector():set(math.random()*3-1, 0, math.random()*3-1)
		self.offset:normalize()
		self.radius = math.random(1, self.hide.rad-1)
		self.lvid = npc:vertex_in_direction(self.vertex, self.offset, self.radius)
		if npc:level_vertex_id()~=self.lvid then
			state_mgr.set_state(npc,"raid")
			utils.send_to_nearest_accessible_vertex(npc, self.lvid) 
		else
			state_mgr.set_state(npc,"hide")
		end
	else
		state_mgr.set_state(npc,"hide")
	end
end
function action_inhide:execute()
	--c:execute("action_inhide:execute_for"..self.object:name())
	local npc = self.object
	npc:disable_talk()
	if npc:level_vertex_id()~=self.lvid then
		if npc_go[npc:id()]~=1 then
			state_mgr.set_state(npc,"raid")
			utils.send_to_nearest_accessible_vertex(npc, self.lvid) 
			npc_go[npc:id()] = 1
			npc_sit[npc:id()] = 0
		end
	else
		if npc_sit[npc:id()]~=1 then
			if npc:character_community()=="monolith" then
				state_mgr.set_state(npc,"trans_0")
			else
				state_mgr.set_state(npc,"hide")
			end
			npc_sit[npc:id()] = 1
			npc_go[npc:id()] = 0
		end
	end
end
function action_inhide:finalize()
	--c:execute("action_inhide:finalize_for"..self.object:name())
	action_base.finalize(self)
	local npc = self.object
	npc_sit[npc:id()] = 0
	npc_go[npc:id()] = 0
	npc:remove_all_restrictions()
end


-- Добавляем в планировщик нашу схему
function add_to_binder(object, char_ini, scheme, section, st)
	local manager = object:motivation_action_manager()
	local property_wounded = xr_evaluators_id.sidor_wounded_base

	manager:remove_evaluator(property_blowout)
	manager:add_evaluator(property_blowout, evaluator_blowout("evaluator_blowout", st))

	manager:remove_evaluator(property_hideout_lost)
	manager:add_evaluator(property_hideout_lost, evaluator_hideout("evaluator_hideout", st))

	manager:remove_evaluator(property_inhide)
	manager:add_evaluator(property_inhide, evaluator_inhide("evaluator_inhide", st))

	local action = action_hideout("action_hideout", st)
	action:add_precondition(world_property(stalker_ids.property_alive, true))
	action:add_precondition(world_property(property_wounded, false))
	action:add_precondition(world_property(stalker_ids.property_enemy, false))
	action:add_precondition(world_property(stalker_ids.property_danger, false))
	action:add_precondition(world_property(property_hideout_lost, false))
	action:add_precondition(world_property(property_inhide, false))
	action:add_precondition(world_property(property_blowout, true))
	action:add_effect(world_property(property_blowout, false))
	manager:add_action(act_hideout, action)

	local action = action_raskolbas("action_raskolbas", st)
	action:add_precondition(world_property(stalker_ids.property_alive, true))
	action:add_precondition(world_property(property_wounded, false))
	action:add_precondition(world_property(property_blowout, false))
	action:add_precondition(world_property(property_inhide, false))
	action:add_precondition(world_property(property_hideout_lost, true))
	action:add_effect(world_property(property_hideout_lost, false))
	manager:add_action(act_psy_effect, action)

	local action = action_inhide("action_inhide", st)
	action:add_precondition(world_property(stalker_ids.property_alive, true))
	action:add_precondition(world_property(property_wounded, false))
	action:add_precondition(world_property(stalker_ids.property_enemy, false))
	action:add_precondition(world_property(stalker_ids.property_danger, false))
	action:add_precondition(world_property(property_blowout, false))
	action:add_precondition(world_property(property_hideout_lost, false))
	action:add_precondition(world_property(property_inhide, true))
	action:add_effect(world_property(property_inhide, false))
	manager:add_action(act_inhide, action)

	action = manager:action(stalker_ids.action_alife_planner)
	action:add_precondition(world_property(property_blowout, false))
	action:add_precondition(world_property(property_hideout_lost, false))
	action:add_precondition(world_property(property_inhide, false))

	action = manager:action(stalker_ids.action_combat_planner)
	action:add_precondition(world_property(property_hideout_lost, false))

	action = manager:action(stalker_ids.action_danger_planner)
	action:add_precondition(world_property(property_hideout_lost, false))
end


-- Функции включения/выключения схемы
function enable_scheme(npc, ini)
	local st = xr_logic.assign_storage_and_bind(npc, ini, "ogsm_hideout")
	st.enabled=true
end
function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
function is_in_pain(npc)
	if npc then
		if npc_psy[npc:id()] == 1 then
			return true
		else
			return false
		end
	end
	return false
end

---------------- Схема поведения НПС при выбросе для OGSM 2.x -----------------

------------------------- Copyright 2007-2008 DEXXX ---------------------------

--[[

If you're going to use the whole of this script or its parts in your own creative 
developments for the S.T.A.L.K.E.R. game, please don't become such a goddamn 
motherfucker like the notorious author of the ABC Mod - Carbrobro. Leave the 
copyrights, note the real author(s) and don't claim others' ideas and their 
realization to be your own ones. It's just simple Modmakers' Ethics. Thank you!

Если вы собираетесь использовать данный скрипт целиком или частично в своих 
разработках по игре S.T.A.L.K.E.R., пожалуйста не опускайтесь до уровня печально 
известного автора ABC мода - Carbrobro. Не удаляйте копирайты, указывайте настоящего 
автора(ов) и не выдавайте чужие идеи и их реализацию за свои. Ведь это элементарная 
этика модостроителей! Спасибо за понимание.

]]--